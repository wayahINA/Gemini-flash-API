// 2. Generate From Image
app.post('/generate-from-image', upload.single('image'), async (req, res) => {
try {
const prompt} = req.body;
const imageBase64 = req.file.buffer.toString("base64');
const resp = await ai.models.generateContent({
model: GEMINI MODEL,
contents: [
{ text: prompt },
{ inlineData:
mimeType: req.file.mimetype, data: imageBase64}}
]
});
res.json(result: extractText(resp) });
} catch (err) {
res.status(500).json({ error: err.message });
}
});



// 4. Generate From Document
app.post('/generate-from-document', upload.single('document'), async (req, res) => {
try {
const { prompt} = req.body;
const docBase64 = req.file.buffer.toString('base64');
const resp = await ai.models.generateContent({
model: GEMINI MODEL,
contents: [
});
{ text: prompt || "Ringkas dokumen berikut:" },
{ inlineData: { mimeType: req.file.mimetype, data: docBase64 } }
res.json({ result: extractText(resp) });
} catch (err) {
res.status(500).json({ error: err.message });
}
});


// 3. Generate From Audio
app.post('/generate-from-audio', upload. single ('audio'), async (req, res) => {
try {
const { prompt} = req.body;
const audioBase64 = req.file.buffer.toString('base64');
const resp = await ai.models.generateContent({
model: GEMINI MODEL,
});
contents: [
{ text: prompt || "Transkrip audio berikut:" },
{ inlineData: { mimeType: req.file.mimetype, data: audioBase64 } }
res.json({ result: extractText(resp) });
} catch (err) {
res.status(500).json({ error: err.message });
}
});














